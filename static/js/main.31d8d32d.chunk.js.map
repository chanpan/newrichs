{"version":3,"sources":["components/dashboard/DashboardComponent.js","constants/index.js","utils/HttpClient.js","actions/LoginAction.js","components/header/HeaderComponent.js","components/user/UserComponent.js","components/auth/login/LoginComponent.js","components/auth/logout/LogoutComponent.js","components/auth/register/RegisterComponent.js","App.js","serviceWorker.js","reducers/LoginReducer.js","reducers/tokenReducer.js","reducers/index.js","index.js"],"names":["DashboardComponent","Component","server","isAbsoluteURLRegex","axios","interceptors","request","use","a","config","test","url","userToken","localStorage","getItem","headers","join","timeout","response","error","isCancel","Promise","reject","code","message","setSuccess","payload","type","setFailed","login","value","history","dispatch","setItem","user_id","result","data","status","token","push","getToken","HeaderComponent","state","showLogout","pathname","this","props","location","dashboard","defaultnav","user","className","to","mapDispatchToProps","connect","LoginReducer","withRouter","UserComponent","LoginComponent","responseFacebook","console","log","componentClicked","showForm","values","handleChange","handleSubmit","errors","setFieldValue","touched","noValidate","onSubmit","name","username","onChange","style","color","password","appId","autoLoad","fields","onClick","callback","icon","isAuthentication","isFetching","isError","errMessage","SignupSchema","Yup","shape","required","validationSchema","initialValues","setSubmitting","formData","FormData","append","setTimeout","LogoutComponent","logout","removeItem","tokenReducer","RegisterComponent","tel","SecuredRoute","component","rest","render","App","exact","path","Boolean","window","hostname","match","initialState","combineReducers","middlewares","applyMiddleware","thunk","store","createStore","reducers","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31d8d32d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DashboardComponent extends Component {\n    render() {\n        return (\n            <div>\n                DashboardComponent\n            </div>\n        );\n    }\n}\n\nexport default DashboardComponent;","// Login Page\nexport const LOGIN_FETCHING = 'LOGIN_FETCHING';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\nexport const LOGOUT = 'LOGOUT';\n\n//////////////// Localization Begin ////////////////\nexport const NETWORK_CONNECTION_MESSAGE = 'Cannot connect to server, Please try again.'; \nexport const NETWORK_TIMEOUT_MESSAGE = 'A network timeout has occurred, Please try again.';  \nexport const UPLOAD_PHOTO_FAIL_MESSAGE = 'An error has occurred. The photo was unable to upload.';\nexport const NOT_CONNECT_NETWORK = 'NOT_CONNECT_NETWORK' \n\n//GET_TOKEN\nexport const GET_TOKEN = \"GET_TOKEN\";\nexport const apiUrl =  \"http://localhost:3004\";\nexport const server = {\n    TOKEN_KEY : `token`,\n    LOGIN_URL:`/user`\n}","import axios from 'axios'\nimport join from 'url-join'\nimport {server, apiUrl, NOT_CONNECT_NETWORK, NETWORK_CONNECTION_MESSAGE} from '../constants'\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//\naxios.interceptors.request.use(async (config) => {\n    if (!isAbsoluteURLRegex.test(config.url)) {\n        const userToken = localStorage.getItem(server.TOKEN_KEY)\n        if (userToken) {\n            config.headers = { 'x-access-token': userToken }\n        }\n        config.url = join(apiUrl, config.url) \n    }\n    config.timeout = 10000 // 10 Second \n    return config\n});\n\naxios.interceptors.response.use((response) => {\n    return response\n}, error => { \n    // console.log(JSON.stringify(error, undefined, 2));\n    if (axios.isCancel(error)) {\n        return Promise.reject(error)\n    } else if (!error.response) {\n        return Promise.reject({ code: NOT_CONNECT_NETWORK, message: NETWORK_CONNECTION_MESSAGE })\n    }\n    return Promise.reject(error)\n});\nexport const httpClient = axios;\n\n","import {\n    LOGIN_FETCHING,\n    LOGIN_SUCCESS,\n    LOGIN_FAILED,\n    GET_TOKEN,\n    LOGOUT,\n    server\n} from \"../constants\";\nimport { httpClient } from \"./../utils/HttpClient\";\n\n\nexport const setFetching = () => ({ type: LOGIN_FETCHING });\nexport const setSuccess = payload => ({ type: LOGIN_SUCCESS, payload });\nexport const setFailed = payload => ({ type: LOGIN_FAILED, payload });\nexport const setLogout = () => ({ type: LOGOUT });\n\nexport const setToken = payload => ({ type: GET_TOKEN, payload });\n\n\n/**\n * \n * @param {*} value \n * @param {*} history \n */\nexport const login = (value, history) => {\n    return async dispatch => {\n        try {\n            dispatch(setFetching()); // fetching\n            //mock login\n            try{\n                localStorage.setItem(server.TOKEN_KEY, 123456);\n                dispatch(setSuccess({user_id:'1'}));\n                //console.log(history);\n                //history.push('dashboard')\n            }catch (error) {\n                //console.log(error);\n                dispatch(setFailed(error.message));\n            }\n            return false;\n            //end mock login\n            let result = await httpClient.post(server.LOGIN_URL, value);\n            if (result.data.status === 'ok') {\n                let {data} = result.data;\n                localStorage.setItem(server.TOKEN_KEY, data.token);\n                dispatch(setSuccess(result.data)); \n\n                history.push(\"/dashboard\");\n            } else {\n                //console.info(result.data)\n                dispatch(setFailed(result.data.message));\n            }\n        } catch (error) {\n            //console.log(error);\n            dispatch(setFailed(error.message));\n        }\n    };\n};\n\n/**\n * \n * @param {*} history \n */\nexport const logout = (history) => {\n    return (dispatch) => {\n        localStorage.removeItem(server.TOKEN_KEY);\n        dispatch(setLogout())\n        history.push(\"/login\");\n    }\n}\n\n\nexport const getToken = (history) => {\n    // console.log('get token');\n    return (dispatch) => {\n        let token = localStorage.getItem(server.TOKEN_KEY);\n        dispatch(setToken(token));\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport { server } from \"../../constants\";\n\nimport { login } from '../../actions/LoginAction';\nimport { connect } from 'react-redux';\n\n\nclass HeaderComponent extends Component {\n    state={\n        showLogout:false\n    }\n    componentDidMount() {\n        //console.log(this.props);\n        \n    }\n    static getDerivedStateFromProps(props, state) {\n        // console.log(localStorage.getItem(server.TOKEN_KEY));\n        if (localStorage.getItem(server.TOKEN_KEY) != null) {\n            return{\n                showLogout:true\n            };\n        }else{\n            return{\n                showLogout:false\n            };\n        }\n        // return null;\n    } \n    render() {\n        const { pathname } = this.props.location;\n        const defaultnav = 'nav-link';\n        const dashboard = pathname === \"/dashboard\" ? defaultnav + \" active\" : defaultnav;\n        const user = pathname === \"/user\" ? defaultnav + \" active\" : defaultnav;\n        return (\n            <div>\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/dashboard\" className={dashboard}>\n                            Dashboard\n                        </Link> {' | '}\n                        <Link to=\"/user\" className={user}>\n                            เจ้าหน้าที่\n                        </Link> \n                        {this.state.showLogout && <Link to=\"/logout\">\n                        {' | '} ออกจากระบบ\n                        </Link>}\n\n                    </li>\n\n                </ul>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ LoginReducer }) => ({\n    LoginReducer,\n});\n\nconst mapDispatchToProps = {\n    login\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(HeaderComponent));","import React, { Component } from 'react';\n\nclass UserComponent extends Component {\n    render() {\n        return (\n            <div>\n                User\n            </div>\n        );\n    }\n}\n\nexport default UserComponent;","import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { login,getToken } from '../../../actions/LoginAction';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport { server } from \"../../../constants\";\nimport { Link } from 'react-router-dom';\nimport FacebookLoginWithButton from 'react-facebook-login';\n\nclass LoginComponent extends Component {\n    componentDidMount() {\n        this.isAuthentication();\n    }\n    isAuthentication(){\n        if (localStorage.getItem(server.TOKEN_KEY) != null) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    responseFacebook = (response) => {\n        console.log(response);\n    }\n\n    componentClicked = () => {\n        console.log( \"Clicked!\" )\n    }\n    showForm = ({ values, handleChange, handleSubmit, setFieldValue, errors, touched }) => {\n        return (\n            <form noValidate onSubmit={handleSubmit}>\n                <div>\n                    <div>\n                        <label>Username: </label>\n                        <input type='text' name=\"username\" value={values.username} onChange={handleChange} />\n                    </div>\n                    {errors.username && touched.username ? (\n                        <div style={{ color: 'red' }}>{errors.username}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <div>\n                        <label>Password: </label>\n                        <input type='password' name=\"password\" value={values.password} onChange={handleChange} />\n                    </div>\n                    {errors.password && touched.password ? (\n                        <div style={{ color: 'red' }}>{errors.password}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <button type='submit'>Login</button>\n                    <FacebookLoginWithButton\n                        appId=\"1206715649505081\"\n                        autoLoad\n                        fields=\"name,email,picture\"\n                        onClick={this.componentClicked}\n                        callback={this.responseFacebook}\n                        icon=\"fa-facebook\"/>\n                    <div>\n                        <Link to=\"/register\">\n                        สมัครสมาชิก\n                        </Link>\n                    </div>\n                     \n                </div>\n            </form>\n        );\n    }\n    render() {\n       \n        const {isFetching,isError,errMessage} = this.props.LoginReducer;\n        const SignupSchema = Yup.object().shape({\n            username: Yup.string().required('Email ต้องไม่เป็นค่าว่าง'),\n            password: Yup.string().required('Password ไม่เป็นค่าว่าง'),\n        });\n         \n        return (\n            <div>\n                {!isFetching && isError && isError && <div style={{color:'red'}}>{errMessage}</div>} \n                <Formik\n                    validationSchema={SignupSchema}\n                    initialValues={{ username: \"admin\", password: \"admin\" }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        let formData = new FormData()\n                        formData.append(\"username\", values.username);\n                        formData.append(\"password\", values.password);\n                        this.props.login(formData, this.props.history);\n                        setTimeout(()=>{\n                            this.isAuthentication();\n                            this.props.getToken();\n                        },500)\n                        setSubmitting(false)  \n                    }}>\n                    {props => this.showForm(props)}\n                </Formik>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ LoginReducer }) => ({\n    LoginReducer,\n});\n\nconst mapDispatchToProps = {\n    login,getToken\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\n","import React, { Component } from 'react';\nimport { logout,getToken } from '../../../actions/LoginAction';\nimport { connect } from 'react-redux';\n\nclass LogoutComponent extends Component {\n    componentDidMount() {\n        this.props.logout(this.props.history);\n        this.props.getToken();\n    }\n    render() {\n        return (\n            <div>\n                \n            </div>\n        );\n    }\n}\n\n// export default LogoutComponent;\nconst mapStateToProps = ({ LoginReducer,tokenReducer }) => ({\n    LoginReducer,tokenReducer\n});\n\nconst mapDispatchToProps = {\n    logout,\n    getToken\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(LogoutComponent);","import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport { login } from '../../../actions/LoginAction';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport { server } from \"../../../constants\";\nimport { Link } from 'react-router-dom';\n\n\nclass RegisterComponent extends Component {\n    componentDidMount() {\n        if (localStorage.getItem(server.TOKEN_KEY) != null) {\n            this.props.history.push(\"/dashboard\")\n        }\n    }\n    showForm = ({ values, handleChange, handleSubmit, setFieldValue, errors, touched }) => {\n        return (\n            <form noValidate onSubmit={handleSubmit}>\n                <div>\n                    <div>\n                        <label>Username</label>\n                        <input type='text' name=\"username\" value={values.username} onChange={handleChange} />\n                    </div>\n                    {errors.username && touched.username ? (\n                        <div style={{ color: 'red' }}>{errors.username}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <div>\n                        <label>Password</label>\n                        <input type='password' name=\"password\" value={values.password} onChange={handleChange} />\n                    </div>\n                    {errors.password && touched.password ? (\n                        <div style={{ color: 'red' }}>{errors.password}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <div>\n                        <label>Name</label>\n                        <input type='text' name=\"name\" value={values.name} onChange={handleChange} />\n                    </div>\n                    {errors.name && touched.name ? (\n                        <div style={{ color: 'red' }}>{errors.name}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <div>\n                        <label>Tel</label>\n                        <input type='text' name=\"tel\" value={values.tel} onChange={handleChange} />\n                    </div>\n                    {errors.tel && touched.tel ? (\n                        <div style={{ color: 'red' }}>{errors.tel}</div>\n                    ) : null}\n                </div>\n                <div>\n                    <button type='submit'>ยืนยัน</button>\n                    <div>\n                        <Link to=\"/login\">\n                            Login\n                        </Link>\n                    </div>\n\n                </div>\n            </form>\n        );\n    }\n    render() {\n\n        const { isFetching, isError, errMessage } = this.props.LoginReducer;\n        const SignupSchema = Yup.object().shape({\n            name: Yup.string().required('Name ต้องไม่เป็นค่าว่าง'),\n            tel: Yup.string().required('Tel ต้องไม่เป็นค่าว่าง'),\n            username: Yup.string().required('Email ต้องไม่เป็นค่าว่าง'),\n            password: Yup.string().required('Password ไม่เป็นค่าว่าง'),\n        });\n\n        return (\n            <div>\n                {!isFetching && isError && <div style={{ color: 'red' }}>{errMessage}</div>}\n                <Formik\n                    validationSchema={SignupSchema}\n                    initialValues={{ username: \"\", password: \"\", name: \"\", tel: \"\" }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        let formData = new FormData()\n                        formData.append(\"username\", values.username);\n                        formData.append(\"password\", values.password);\n                        this.props.login(formData, this.props.history);\n                        setSubmitting(false)\n                    }}>\n                    {props => this.showForm(props)}\n                </Formik>\n\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({ LoginReducer }) => ({\n    LoginReducer,\n});\n\nconst mapDispatchToProps = {\n    login\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterComponent);\n","import React,{Component} from 'react';\nimport { BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport './App.css';\n\n/** components */\nimport DashboardComponent from './components/dashboard';\nimport HeaderComponent from './components/header';\nimport UserComponent from './components/user';\nimport LoginComponent from './components/auth/login';\nimport LogoutComponent from './components/auth/logout/LogoutComponent';\nimport RegisterComponent from './components/auth/register/RegisterComponent';\nimport { server } from \"./constants\";\n\nimport { getToken } from './actions/LoginAction';\nimport { connect } from 'react-redux';\n\nconst isLoggedIn = ()=>{\n  return localStorage.getItem(server.TOKEN_KEY) != null\n}\n// Protected Route\nconst SecuredRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      // ternary condition\n      isLoggedIn() === true ? (\n        <Component {...props}/>\n      )\n      :\n      (<Redirect to=\"/login\"/>)\n    }\n  />\n);\n\n\n\nclass App extends Component {\n  componentDidMount(){\n    this.props.getToken();\n  }\n  render() {\n    // console.log(this.props.tokenReducer);\n    let {token} = this.props.tokenReducer;\n    return (\n      \n      <Router>\n\n      {token !== null && <HeaderComponent /> }  \n      <Route exact={true} path=\"/\" component={() => (<Redirect to=\"/login\" />)} />\n      <SecuredRoute path=\"/dashboard\" component={DashboardComponent}/>\n      <SecuredRoute path=\"/user\" component={UserComponent} />\n      <SecuredRoute path=\"/logout\" component={LogoutComponent}/>\n      <Route path=\"/register\" component={RegisterComponent} />\n      <Route path=\"/login\" component={LoginComponent} />\n    </Router>\n    );\n  }\n\n} \n// export default App;\n\nconst mapStateToProps = ({ tokenReducer }) => ({\n  tokenReducer,\n});\n\nconst mapDispatchToProps = {\n  getToken\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    LOGIN_FETCHING,\n    LOGIN_SUCCESS,\n    LOGIN_FAILED,\n} from \"../constants\";\nconst initialState = {\n    result: null,\n    isFetching: false,\n    isError: false,\n    errMessage: null\n};\nexport default (state = initialState, { type, payload }) => {\n    switch (type) {\n      case LOGIN_FETCHING:\n        return { ...state, result: null, isFetching: true, isError: false,errMessage:null };\n      case LOGIN_SUCCESS:\n        return { ...state, result: payload, isFetching: false, isError: false,errMessage:null };\n      case LOGIN_FAILED:\n        return { ...state, result: null, isFetching: false, isError: true,errMessage:payload };\n      default:\n        return state;\n    }\n  };\n","import { GET_TOKEN } from \"../constants\";\nconst initialState = {\n  token: null\n};\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case GET_TOKEN:\n      return { ...state, token: payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport LoginReducer from './LoginReducer';\nimport tokenReducer from './tokenReducer';\nexport default combineReducers({\n    LoginReducer,\n    tokenReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";  \nimport reducers from \"./reducers\"; \n\n\nvar middlewares = applyMiddleware(thunk);    \nconst store = createStore(reducers, middlewares);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}